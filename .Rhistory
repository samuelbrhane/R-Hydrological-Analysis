cor_matrix <- cor(precipitation_data)
cor_matrix
# Plot correlogram
corrplot(cor_matrix, method = "shade", type = "full",
tl.col = "orange", tl.srt = 45,
title = "Correlogram of Precipitation Stations",
mar = c(0, 0, 2, 0)
)
# Catchment area in mÂ²
catchment_area <- 1847000000
# Calculate Runoff
main_data$Runoff <- (main_data$Discharge * 3600 * 24 * 1000) / catchment_area
main_data$Discharge_mm <- main_data$Discharge * 3600 * 24 * 1000
# Calculate the water balance
main_data$Water_Balance <- main_data$Avg_Precipitation - main_data$Evapotrans - main_data$Runoff
# Calculated Runoff
main_data$Calculated_Runoff <- main_data$Avg_Precipitation - main_data$Evapotrans
# Plot measured and calculated runoff
yearly_runoff <- main_data %>%
group_by(Year) %>%
summarise(
Total_Measured = sum(Runoff),
Total_Calculated = sum(Calculated_Runoff))
plot(yearly_runoff$Year, yearly_runoff$Total_Measured,
xlab = "Date", ylab ="Runoff", type = "l", col = "red", main = "Measured and Calculated Runoff")
lines(yearly_runoff$Year, yearly_runoff$Total_Calculated, lty = 2, col = "green")
legend("topright", legend = c("Measured", "Calculated"), col = c("red", "green"), lty = c(1, 2))
# Group data by Year and calculate total runoff and total precipitation
annual_runoff <- main_data %>%
group_by(Year) %>%
summarise(
Total_Runoff = sum(Runoff),
Total_Precipitation = sum(Avg_Precipitation)
)
# Calculate the runoff coefficient for each year
annual_runoff$Runoff_Coefficient <- annual_runoff$Total_Runoff / annual_runoff$Total_Precipitation
annual_runoff
# Plot the runoff coefficient over the years
plot(as.numeric(annual_runoff$Year), annual_runoff$Runoff_Coefficient, type = "b", col = "blue",
xlab = "Year", ylab = "Runoff Coefficient", main = "Runoff Coefficient Values")
# Group data by Year and calculate total evapotranspiration and total precipitation
evapotrans_prec <- main_data %>%
group_by(Year) %>%
summarise(
Avg_Evapotrans = sum(Evapotrans),
Avg_Precipitation = sum(Avg_Precipitation))
# Calculate evapotranspiration to precipitation ratio
evapotrans_prec$Ratio <- evapotrans_prec$Avg_Evapotrans / evapotrans_prec$Avg_Precipitation
evapotrans_prec
# Plot evapotranpitation to precipitation ratio
plot(evapotrans_prec$Year, evapotrans_prec$Ratio, type = "b", col = "orange",
xlab = "Year", ylab = "Ratio", main = "Evapotranspiration to Precipitation Ratio")
# Convert the Date column to POSIXct format for time series handling
main_data$Date <- as.POSIXct(strptime(main_data$Date, format = "%Y-%m-%d"))
# Define a zoo object for Discharge data with Date as the index
Qzoo <- zoo(main_data$Discharge, main_data$Date)
# Convert zoo object to lfobj using createlfobj
discharge_timeseries <- createlfobj(ts(Qzoo), startdate = "01/01/2010", hyearstart = 1)
# Define the units for the lfobj data
setlfunit("m^3/s")
# Conduct baseflow separation
discharge_timeseries$baseflow <- baseflow(discharge_timeseries$flow)
# Display the first few rows of the discharge_timeseries object
head(discharge_timeseries)
plot(discharge_timeseries$flow, type = "l", ylab = "Flow")
lines(discharge_timeseries$baseflow, col = "green")
bfplot(discharge_timeseries)
# Plot the Flow Duration Curve
fdc(discharge_timeseries)
abline(h=Q95(discharge_timeseries), col = "green", lty = 2)
text(90, 10, "Q95")
# FDC for the year 2014
y2014 <- fdc(discharge_timeseries, year = 2014)
# FDC for the year 2022
y2022 <- fdc(discharge_timeseries, year = 2022)
# Plot Flow Duration Curves (FDC) for 2014 and 2022
plot(as.numeric(y2014), type = "l", col = "blue", ylab = "Flow", main = "Flow Frequency Comparison: 2014 and 2022")
lines(as.numeric(y2022), col = "red", type = "l", lty = 2)
legend("topright", legend = c("2014", "2022"), col = c("blue", "red"), lty = c(1, 2))
# Calculate Baseflow Index
bfi <- BFI(discharge_timeseries)
bfi
# Calculate Mean Annual Minimum Flow
mam <- MAM(discharge_timeseries)
mam
# Calculate Mean Flow
meanflow <- mean(discharge_timeseries$flow, na.rm = TRUE)
meanflow
# Calculate Flow Quantiles
# Q95
q95 <- Q95(discharge_timeseries)
q95
# Q90
q90 <- Q90(discharge_timeseries)
q90
# Q70
q70 <- Q70(discharge_timeseries)
q70
# Calculate Seasonality Index at Q95
seasonal_index <- seasindex(discharge_timeseries, Q = 95)
seasonal_index
# Calculate Seasonality Ratio
seasonal_ratio <- seasratio(discharge_timeseries, breakdays = "01/07", Q = 95)
seasonal_ratio
# Summarize
summary(discharge_timeseries)
# Identify Drought Periods
discharge_timeseries$drought <- discharge_timeseries$flow < q95
# Display few rows of identified drought periods
drought_periods = discharge_timeseries[discharge_timeseries$drought == TRUE, ]
head(drought_periods)
# Create a Date column
drought_periods$Date <- as.Date(with(drought_periods, paste(year, month, day, sep = "-")), "%Y-%m-%d")
plot(drought_periods$Date, drought_periods$flow,
col = "#1a24a4", xlab = "Date", ylab = "Flow", main = "Flow with Drought Periods (Below Q95 Threshold)")
# Identify drought periods using the Q95 threshold
drought_time = find_droughts(discharge_timeseries, threshold = Q95(discharge_timeseries), na.rm = TRUE)
# Summarize drought events, filtering out minor ones
selected = summary(drought_time, drop_minor = 0)
# Plot the drought time series
plot(drought_time)
# Plot the seasonal distribution of selected drought events
plot(season(selected$time))
# Initialize list to store the results
mann_kandell_test <- list()
# Mann-Kendall test for Discharge
mann_kandell_test$Discharge <- MannKendall(main_data$Discharge)
# Mann-Kendall test for Precipitation at each station
precip_stations <- c("P1_Luce", "P2_Solcava", "P3_Lasko", "P4_GornjiGrad", "P5_Radegunda")
for (station in precip_stations) {
mann_kandell_test[[station]] <- MannKendall(main_data[[station]])
}
# Mann-Kendall test for Air Temperature
mann_kandell_test$Airtemp <- MannKendall(main_data$Airtemp)
# Mann-Kendall test for Evapotranspiration
mann_kandell_test$Evapotrans <- MannKendall(main_data$Evapotrans)
# Test result
mann_kandell_test
mk.test(main_data$Discharge)
plot(main_data$Date, main_data$Discharge, type = "l", xlab = "Year", ylab = "Discharge[m3/s]", main = "Discharge plot")
abline(lm(main_data$Discharge ~ main_data$Date), lty = 2, col = "red")
# Max discharge values
DischargeMax <- main_data %>%
group_by(Year) %>%
summarise(
maxDischarge = max(Discharge)
)
DischargeMax
# Plot yearly maximum discharge
plot(DischargeMax$Year, DischargeMax$maxDischarge, type = "l", xlab = "Year", ylab = "Max Discharge[m3/s]",
main = "Yearly Max Discharge")
abline(lm(DischargeMax$maxDischarge ~ DischargeMax$Year), lty = 2, col = "red")
peak_data <- read_excel("peak_discharge_data.xlsx")
# Calculate annual peak for vQvk discharge
annual_maxima_vQvk <- peak_data %>%
group_by(Year) %>%
summarise(
vQvk = max(Qvk, na.rm = TRUE)
)
# Display few rows
head(annual_maxima_vQvk)
# Filter vQvk data from 2010 onward
annual_vQvk_selected <- annual_maxima_vQvk %>%
filter(Year >= 2010)
# Combine the two peak discharge
combined_data <- data.frame(
Year = annual_vQvk_selected$Year,
main_DischargeMax = DischargeMax$maxDischarge,
vQvk_Discharge = annual_vQvk_selected$vQvk
)
# Determine y-axis limits
y_range <- range(c(combined_data$main_DischargeMax, combined_data$vQvk_Discharge), na.rm = TRUE)
# Plotting vQvk peak discharge
plot(combined_data$Year, combined_data$vQvk_Discharge, type = "l", col = "blue", lwd = 1,
xlab = "Year", ylab = "Peak Discharge", main = "Comparison of Peak Discharge Values", ylim = y_range)
# Add main_DischargeMax to the plot
lines(combined_data$Year, combined_data$main_DischargeMax, col = "red", lwd = 1)
# Adding a legend
legend("topright", legend = c("Main DischargeMax", "vQvk Discharge"),
col = c("red", "blue"), lwd = 1)
# Summary statistics for vQvk
summary(annual_maxima_vQvk)
# Plot annual maxima series for vQvk
plot(annual_maxima_vQvk$Year, annual_maxima_vQvk$vQvk, type = "b",
xlab = "Year", ylab = "vQvk [m3/s]", main = "Annual Peak Discharge for Savinja River")
# Calculate L-moments for the vQvk data
lmoments <- lmoms(annual_maxima_vQvk$vQvk)
# Display calculated L-moments
lmoments$lambdas
# Estimate parameters for PE3, GEV, GNO, Normal, and Weibull distributions
pe3par <- lmom2par(lmoments, type = "pe3")
gevpar <- lmom2par(lmoments, type = "gev")
gnopar <- lmom2par(lmoments, type = "gno")
norpar <- lmom2par(lmoments, type = "nor")
wei_par <- lmom2par(lmoments, type = "wei")
# Define return periods and calculate exceedance probabilities
return_periods <- c(2, 5, 10, 20, 30, 50, 100, 300,500)
# Calculate Fx values for each return period
exceedance_probs <- 1 - 1 / return_periods
# Calculate discharge values for each return period using PE3, GEV, GNO, Normal, and Weibull distributions
discharge_pe3 <- quape3(exceedance_probs, pe3par)
discharge_gev <- quagev(exceedance_probs, gevpar)
discharge_gno <- quagno(exceedance_probs, gnopar)
discharge_nor <- quanor(exceedance_probs, norpar)
discharge_wei <- quawei(exceedance_probs, wei_par)
# Calculate Weibull plotting positions for observed data and return periods for measured data
weibull_positions <- pp(annual_maxima_vQvk$vQvk, a = 0)
observed_return_periods <- 1 / (1 - weibull_positions)
# Plot the PE3, GEV, GNO, Normal, and Weibull distribution results
plot(return_periods, discharge_pe3, type = "l", log = "x", col = "blue",
xlab = "Return Period [years]", ylab = "Discharge [m3/s]",
main = "Flood Frequency Analysis for Savinja River", ylim = c(400, max(discharge_pe3, discharge_gev, discharge_gno, discharge_wei, na.rm = TRUE)))
# Add GEV, GNO, Normal, and Weibull distribution lines
lines(return_periods, discharge_gev, col = "red")
lines(return_periods, discharge_gno, col = "green")
lines(return_periods, discharge_nor, col = "orange")
lines(return_periods, discharge_wei, col = "#ff31a1")
# Add measured discharge data points
points(observed_return_periods, sort(annual_maxima_vQvk$vQvk), col = "black", pch = 16)
# Add legend
legend("topleft", legend = c("PE3 Distribution", "GEV Distribution", "GNO Distribution",
"Normal Distribution", "Weibull Distribution", "Observed Data"),
col = c("blue", "red", "green", "orange", "#ff31a1", "black"), lty = 1, pch = c(NA, NA, NA, NA, 16))
# Set seed for reproducibility
set.seed(123)
# Calculate confidence intervals for the PE3 distribution
ci_pe3 <- genci.simple(para = pe3par, n = length(annual_maxima_vQvk$vQvk),
f = exceedance_probs, level = 0.90, nsim = 1000, edist = "gno")
# Combine the confidence intervals and design discharges
confidence_intervals <- data.frame(
Return_Period = return_periods,
Lower_CI = ci_pe3$lwr,
Upper_CI = ci_pe3$upr,
PE3_Discharge = discharge_pe3
)
# Plot PE3 distribution with confidence intervals
plot(confidence_intervals$Return_Period, confidence_intervals$PE3_Discharge, type = "l", log = "x",
col = "green", xlab = "Return Period [years]", ylab = "Discharge [m3/s]",
main = "Flood Frequency Analysis",
ylim = c(400, max(ci_pe3$upr, na.rm = TRUE)))
# Add confidence interval bounds for PE3 distribution
lines(confidence_intervals$Return_Period, confidence_intervals$Lower_CI, col = "purple", lty = 2)
lines(confidence_intervals$Return_Period, confidence_intervals$Upper_CI, col = "purple", lty = 2)
# Add observed discharge data points for comparison
points(observed_return_periods, sort(annual_maxima_vQvk$vQvk), col = "black", pch = 16)
# Add legend
legend("bottomright", legend = c("PE3 Distribution", "Lower CI", "Upper CI", "Observed Data"),
col = c("green", "purple", "purple", "black"), lty = c(1, 2, 2, NA), pch = c(NA, NA, NA, 16))
# Calculate days with precipitation > 10 mm
prep_above_10 <- main_data %>%
summarise(
P1_Luce = sum(P1_Luce > 10),
P2_Solcava = sum(P2_Solcava > 10),
P3_Lasko = sum(P3_Lasko > 10),
P4_GornjiGrad = sum(P4_GornjiGrad > 10),
P5_Radegunda = sum(P5_Radegunda > 10),
)
# Calculate frequency for days with precipitation > 10 mm
frequency_above_10 <- prep_above_10 * 100 / nrow(main_data)
# Combine both the counts and frequency rows
results_above_10 <- bind_rows(prep_above_10, frequency_above_10)
rownames(results_above_10) <- c("Days", "Frequency")
# Display the results
results_above_10
# Calculate days with precipitation > 50 mm
prep_above_50 <- main_data %>%
summarise(
P1_Luce = sum(P1_Luce > 50),
P2_Solcava = sum(P2_Solcava > 50),
P3_Lasko = sum(P3_Lasko > 50),
P4_GornjiGrad = sum(P4_GornjiGrad > 50),
P5_Radegunda = sum(P5_Radegunda > 50)
)
# Calculate frequency for days with precipitation > 50 mm
frequency_above_50 <- prep_above_50 * 100 / nrow(main_data)
# Combine both the counts and frequency rows
results_above_50 <- bind_rows(prep_above_50, frequency_above_50)
rownames(results_above_50) <- c("Days", "Frequency")
# Display the results
results_above_50
# Create a zoo object for all 5 stations
precip_zoo <- zoo(main_data[, c("P1_Luce", "P2_Solcava", "P3_Lasko", "P4_GornjiGrad", "P5_Radegunda")], order.by = main_data$Date)
head(precip_zoo)
# Convert time index to year-month
yearmon_index <- as.yearmon(time(precip_zoo))
# Aggregate precipitation data by month
monthly_precip <- aggregate(precip_zoo, yearmon_index, sum)
# Plot the aggregated monthly precipitation data for P1_Luce
plot(monthly_precip$P1_Luce, xlab="Year", ylab="Monthly precipitation [mm]", main="Monthly Precipitation P1_Luce")
# Get summary of the monthly data
summary(monthly_precip)
# Calculate SPI at 3-month scale for all 5 stations
# P1_Luce SPI (3-month scale)
spi_3_P1_Luce <- spi(data = as.numeric(monthly_precip$P1_Luce), scale = 3, distribution = "Gamma")
# P2_Solcava SPI (3-month scale)
spi_3_P2_Solcava <- spi(data = as.numeric(monthly_precip$P2_Solcava), scale = 3, distribution = "Gamma")
# P3_Lasko SPI (3-month scale)
spi_3_P3_Lasko <- spi(data = as.numeric(monthly_precip$P3_Lasko), scale = 3, distribution = "Gamma")
# P4_GornjiGrad SPI (3-month scale)
spi_3_P4_GornjiGrad <- spi(data = as.numeric(monthly_precip$P4_GornjiGrad), scale = 3, distribution = "Gamma")
# P5_Radegunda SPI (3-month scale)
spi_3_P5_Radegunda <- spi(data = as.numeric(monthly_precip$P5_Radegunda), scale = 3, distribution = "Gamma")
# Plot SPI-3 for P1_Luce
plot(spi_3_P1_Luce, main = "SPI-3 for P1_Luce")
# Plot SPI-3 for P2_Solcava
plot(spi_3_P2_Solcava, main = "SPI-3 for P2_Solcava")
# Plot SPI-3 for P3_Lasko
plot(spi_3_P3_Lasko, main = "SPI-3 for P3_Lasko")
# Plot SPI-3 for P4_GornjiGrad
plot(spi_3_P4_GornjiGrad, main = "SPI-3 for P4_GornjiGrad")
# Plot SPI-3 for P5_Radegunda
plot(spi_3_P5_Radegunda, main = "SPI-3 for P5_Radegunda")
# View SPI values
spi_3_P1_Luce
spi_3_P2_Solcava
spi_3_P3_Lasko
spi_3_P4_GornjiGrad
spi_3_P5_Radegunda
# Convert data to daily for P1_Luce
daily_date <- as.Date(time(precip_zoo))
# Daily precipitation totals for P1_Luce
daily_precip <- aggregate(precip_zoo$P1_Luce, daily_date, sum)
# Check the basic statistics of the daily data
summary(daily_precip)
# Plot daily precipitation to examine data structure
plot(daily_precip, xlab="Year", ylab="Daily precipitation [mm]", main="Daily Precipitation for P1_Luce")
# Parameters
observation_days <- 365
cumulative_precip <- rep(NA, length(daily_precip))
# Convert daily precipitation data to a numeric vector
precip_values <- as.numeric(daily_precip)
# Calculate cumulative precipitation (EP)
for (day in (observation_days + 1):length(precip_values)) {
cumulative_sum <- 0
for (past_day in 1:observation_days) {
cumulative_sum <- cumulative_sum + sum(precip_values[(day - past_day + 1):day]) / past_day
}
cumulative_precip[day] <- cumulative_sum
}
# Mean of cumulative precipitation
mean_cumulative_precip <- mean(cumulative_precip, na.rm=TRUE)
# Deviation from mean
deviation_precip <- cumulative_precip - mean_cumulative_precip
# Standardized EDI
EDI <- deviation_precip / sd(deviation_precip, na.rm=TRUE)
# Plot EDI with drought and wetness severity lines
plot(time(daily_precip), EDI, type="l", col="#000000", lty=3,
xlab="Year", ylab="EDI", main="Effective Drought Index (EDI) for P1_Luce", xaxt="n")
# Add x-axis with yearly labels
axis(1, at = seq(from = as.numeric(time(daily_precip)[1]),
to = as.numeric(time(daily_precip)[length(time(daily_precip))]),
by = 365),
labels = seq(2010, 2022, by = 1))
# Convert data to daily for P1_Luce
daily_date <- as.Date(time(precip_zoo))
# Daily precipitation totals for P1_Luce
daily_precip <- aggregate(precip_zoo$P1_Luce, daily_date, sum)
# Check the basic statistics of the daily data
summary(daily_precip)
# Plot daily precipitation to examine data structure
plot(daily_precip, xlab="Year", ylab="Daily precipitation [mm]", main="Daily Precipitation for P1_Luce")
# Parameters
observation_days <- 365
cumulative_precip <- rep(NA, length(daily_precip))
# Convert daily precipitation data to a numeric vector
precip_values <- as.numeric(daily_precip)
# Calculate cumulative precipitation (EP)
for (day in (observation_days + 1):length(precip_values)) {
cumulative_sum <- 0
for (past_day in 1:observation_days) {
cumulative_sum <- cumulative_sum + sum(precip_values[(day - past_day + 1):day]) / past_day
}
cumulative_precip[day] <- cumulative_sum
}
# Mean of cumulative precipitation
mean_cumulative_precip <- mean(cumulative_precip, na.rm=TRUE)
# Deviation from mean
deviation_precip <- cumulative_precip - mean_cumulative_precip
# Standardized EDI
EDI <- deviation_precip / sd(deviation_precip, na.rm=TRUE)
# Plot EDI with drought and wetness severity lines
plot(time(daily_precip), EDI, type="l", col="#000000", lty=3,
xlab="Year", ylab="EDI", main="Effective Drought Index (EDI) for P1_Luce", xaxt="n")
# Define yearly labels for the x-axis
years <- seq(2010, 2022, by = 1)
x_positions <- seq(from = as.numeric(time(daily_precip)[1]),
to = as.numeric(time(daily_precip)[length(time(daily_precip))]),
length.out = length(years))
# Add x-axis with yearly labels
axis(1, at = x_positions, labels = years)
# Add threshold lines
abline(h = c(-2, -1.5, -1, 1, 1.5, 2),
col = c("red", "orange", "yellow", "green", "lightblue", "blue"),
lty = 2)
# Add labels for each threshold
text(x = rep(mean(x_positions), 6), y = c(-2, -1.5, -1, 1, 1.5, 2),
labels = c("Extremely Dry", "Severely Dry", "Moderately Dry",
"Moderately Wet", "Severely Wet", "Extremely Wet"),
col = c("red", "orange", "yellow", "green", "lightblue", "blue"),
pos = 4)
# Plot SPI for comparison
par(mar = c(3, 3, 3, 3) + 0.1)
plot(time(monthly_precip), spi_3_P1_Luce$fitted, type="l", col="#000000", lty=3,
xlab="Year", ylab="SPI-3", main="Standardized Precipitation Index (SPI-3) for P1_Luce")
# Add threshold lines
abline(h = c(-2, -1.5, -1, 1, 1.5, 2),
col = c("red", "orange", "yellow", "green", "lightblue", "blue"),
lty = 2)
# Add labels for each threshold
text(x = rep(2011, 6), y = c(-2, -1.5, -1, 1, 1.5, 2),
labels = c("Extremely Dry", "Severely Dry", "Moderately Dry", "Moderately Wet", "Severely Wet", "Extremely Wet"),
col = c("red", "orange", "yellow", "green", "lightblue", "blue"))
drought_zoo = zoo(selected$duration, selected$time)
par(new = TRUE)
plot(drought_zoo, axes = FALSE, xlab = "", ylab = "", type = "h", col = "purple", lwd = 2)
axis(side = 4, at = pretty(range(drought_zoo)))
mtext("Duration of hydrological drought", side = 4, line = 3)
# Summary statistics for vQvk
summary(annual_maxima_vQvk)
# Plot annual maxima series for vQvk
plot(annual_maxima_vQvk$Year, annual_maxima_vQvk$vQvk, type = "b",
xlab = "Year", ylab = "vQvk [m3/s]", main = "Annual Peak Discharge for Savinja River")
# Calculate L-moments for the vQvk data
lmoments <- lmoms(annual_maxima_vQvk$vQvk)
# Display calculated L-moments
lmoments$lambdas
# Estimate parameters for PE3, GEV, GNO, Normal, and Weibull distributions
pe3par <- lmom2par(lmoments, type = "pe3")
gevpar <- lmom2par(lmoments, type = "gev")
gnopar <- lmom2par(lmoments, type = "gno")
norpar <- lmom2par(lmoments, type = "nor")
wei_par <- lmom2par(lmoments, type = "wei")
# Define return periods and calculate exceedance probabilities
return_periods <- c(2, 5, 10, 20, 30, 50, 100, 300,500)
# Calculate Fx values for each return period
exceedance_probs <- 1 - 1 / return_periods
# Calculate discharge values for each return period using PE3, GEV, GNO, Normal, and Weibull distributions
discharge_pe3 <- quape3(exceedance_probs, pe3par)
discharge_gev <- quagev(exceedance_probs, gevpar)
discharge_gno <- quagno(exceedance_probs, gnopar)
discharge_nor <- quanor(exceedance_probs, norpar)
discharge_wei <- quawei(exceedance_probs, wei_par)
# Calculate Weibull plotting positions for observed data and return periods for measured data
weibull_positions <- pp(annual_maxima_vQvk$vQvk, a = 0)
observed_return_periods <- 1 / (1 - weibull_positions)
# Plot the PE3, GEV, GNO, Normal, and Weibull distribution results
plot(return_periods, discharge_pe3, type = "l", log = "x", col = "blue",
xlab = "Return Period [years]", ylab = "Discharge [m3/s]",
main = "Flood Frequency Analysis for Savinja River", ylim = c(400, max(discharge_pe3, discharge_gev, discharge_gno, discharge_wei, na.rm = TRUE)))
# Add GEV, GNO, Normal, and Weibull distribution lines
lines(return_periods, discharge_gev, col = "red")
lines(return_periods, discharge_gno, col = "green")
lines(return_periods, discharge_nor, col = "orange")
lines(return_periods, discharge_wei, col = "#ff31a1")
# Add measured discharge data points
points(observed_return_periods, sort(annual_maxima_vQvk$vQvk), col = "black", pch = 16)
# Add legend
legend("topleft", legend = c("PE3 Distribution", "GEV Distribution", "GNO Distribution",
"Normal Distribution", "Weibull Distribution", "Observed Data"),
col = c("blue", "red", "green", "orange", "#ff31a1", "black"), lty = 1, pch = c(NA, NA, NA, NA, NA))
knitr::opts_chunk$set(
echo = TRUE,
fig.width = 9,
fig.height = 6,
fig.align = "center")
# install.packages("MODISTools")
library(airGRteaching)
library(geodata)
library(knitr)
library(writexl)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(lfstat)
library(zoo)
library(Kendall)
library(trend)
library(lmom)
library(lmomco)
library(SPEI)
library(rsoi)
library(terra)
library(raster)
library(whitebox)
library(sp)
library(gstat)
library(raster)
library(airGR)
library(TUWmodel)
library(hydroGOF)
library(DEoptim)
library(GWEX)
library(IDF)
library(dismo)
library(MODISTools)
# list of all products that can be downloaded
head(mt_products())
# check what data are available in a product
head(mt_bands("MYD11A2"))
LC <- mt_subset(product = "MYD11A2",
lat = 46.0959,
lon = 15.1874,
band = "LST_Day_1km",
start = "2021-01-01",
end = "2022-12-31",
km_lr = 80,
km_ab = 80,
site_name = "Savinja-VelikoSirje",
internal = TRUE,
progress = FALSE)
